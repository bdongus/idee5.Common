// <auto-generated />
#nullable enable
using System;
using System.Threading;
using System.Threading.Tasks;

namespace {{Namespace}} {
    /// <inheritdoc/>
    public class {{MethodName}}CommandHandler : ICommandHandlerAsync<{{MethodName}}Command> {

        /// <inheritdoc/>
        public {{MethodName}}CommandHandler(ISession session) : base(session) {
        }
        /// <inheritdoc/>
        public override async Task HandleAsync({{MethodName}}Command command, CancellationToken cancellationToken = default) {
            if (command is null) throw new ArgumentNullException(nameof(command));
            // Insert your command logic here
            // Do NOT change the "{{MethodName}}Command command" part

            // avavailable tags: {{Namespace}}, {{MethodName}}, {{MethodParameters}}

            // example: aggregate.{{MethodName}}({{MethodParameters}});
            // result: aggregate.DomeSomething(command.Arg1, command.Arg2);
        }
    }
}
